// Mocks generated by Mockito 5.3.1 from annotations
// in file_selector_windows/test/file_selector_api_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ffi' as _i4;

import 'package:file_selector_windows/src/file_open_dialog_wrapper.dart' as _i3;
import 'package:file_selector_windows/src/shell_item_wrapper.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:win32/win32.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIFileOpenDialog_0 extends _i1.SmartFake
    implements _i2.IFileOpenDialog {
  _FakeIFileOpenDialog_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIShellItem_1 extends _i1.SmartFake implements _i2.IShellItem {
  _FakeIShellItem_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIShellItemArray_2 extends _i1.SmartFake
    implements _i2.IShellItemArray {
  _FakeIShellItemArray_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FileOpenDialogWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileOpenDialogWrapper extends _i1.Mock
    implements _i3.FileOpenDialogWrapper {
  MockFileOpenDialogWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int setOptions(
    int? options,
    _i2.IFileOpenDialog? dialog,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setOptions,
          [
            options,
            dialog,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int getOptions(
    _i4.Pointer<_i4.Uint32>? ptrOptions,
    _i2.IFileOpenDialog? dialog,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOptions,
          [
            ptrOptions,
            dialog,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int setOkButtonLabel(
    String? confirmationText,
    _i2.IFileOpenDialog? dialog,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setOkButtonLabel,
          [
            confirmationText,
            dialog,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int setFileTypes(
    Map<String, String>? filterSpecification,
    _i2.IFileOpenDialog? dialog,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFileTypes,
          [
            filterSpecification,
            dialog,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int show(
    int? hwndOwner,
    _i2.IFileOpenDialog? dialog,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [
            hwndOwner,
            dialog,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int release(_i2.IFileOpenDialog? dialog) => (super.noSuchMethod(
        Invocation.method(
          #release,
          [dialog],
        ),
        returnValue: 0,
      ) as int);
  @override
  int getResult(
    _i4.Pointer<_i4.Pointer<_i2.COMObject>>? ptrCOMObject,
    _i2.IFileOpenDialog? dialog,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getResult,
          [
            ptrCOMObject,
            dialog,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int getResults(
    _i4.Pointer<_i4.Pointer<_i2.COMObject>>? ptrCOMObject,
    _i2.IFileOpenDialog? dialog,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getResults,
          [
            ptrCOMObject,
            dialog,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int setFolder(
    _i4.Pointer<_i4.Pointer<_i2.COMObject>>? ptrPath,
    _i2.IFileOpenDialog? dialog,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFolder,
          [
            ptrPath,
            dialog,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int setFileName(
    String? suggestedFileName,
    _i2.IFileOpenDialog? dialog,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFileName,
          [
            suggestedFileName,
            dialog,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int createItemFromParsingName(
    String? initialDirectory,
    _i4.Pointer<_i2.GUID>? ptrGuid,
    _i4.Pointer<_i4.Pointer<_i4.NativeType>>? ptrPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createItemFromParsingName,
          [
            initialDirectory,
            ptrGuid,
            ptrPath,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int coInitializeEx() => (super.noSuchMethod(
        Invocation.method(
          #coInitializeEx,
          [],
        ),
        returnValue: 0,
      ) as int);
  @override
  _i2.IFileOpenDialog createInstance() => (super.noSuchMethod(
        Invocation.method(
          #createInstance,
          [],
        ),
        returnValue: _FakeIFileOpenDialog_0(
          this,
          Invocation.method(
            #createInstance,
            [],
          ),
        ),
      ) as _i2.IFileOpenDialog);
  @override
  void coUninitialize() => super.noSuchMethod(
        Invocation.method(
          #coUninitialize,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ShellItemWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockShellItemWrapper extends _i1.Mock implements _i5.ShellItemWrapper {
  MockShellItemWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IShellItem createShellItem(
          _i4.Pointer<_i4.Pointer<_i2.COMObject>>? ptrShellItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #createShellItem,
          [ptrShellItem],
        ),
        returnValue: _FakeIShellItem_1(
          this,
          Invocation.method(
            #createShellItem,
            [ptrShellItem],
          ),
        ),
      ) as _i2.IShellItem);
  @override
  _i2.IShellItemArray createShellItemArray(
          _i4.Pointer<_i4.Pointer<_i2.COMObject>>? ptrShellItemArray) =>
      (super.noSuchMethod(
        Invocation.method(
          #createShellItemArray,
          [ptrShellItemArray],
        ),
        returnValue: _FakeIShellItemArray_2(
          this,
          Invocation.method(
            #createShellItemArray,
            [ptrShellItemArray],
          ),
        ),
      ) as _i2.IShellItemArray);
  @override
  int getDisplayName(
    _i4.Pointer<_i4.IntPtr>? ptrPath,
    _i2.IShellItem? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayName,
          [
            ptrPath,
            item,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  String getUserSelectedPath(_i4.Pointer<_i4.IntPtr>? ptrPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserSelectedPath,
          [ptrPath],
        ),
        returnValue: '',
      ) as String);
  @override
  int releaseItem(_i2.IShellItem? item) => (super.noSuchMethod(
        Invocation.method(
          #releaseItem,
          [item],
        ),
        returnValue: 0,
      ) as int);
  @override
  void getCount(
    _i4.Pointer<_i4.Uint32>? ptrNumberOfSelectedElements,
    _i2.IShellItemArray? iShellItemArray,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #getCount,
          [
            ptrNumberOfSelectedElements,
            iShellItemArray,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  int getItemAt(
    int? index,
    _i4.Pointer<_i4.Pointer<_i2.COMObject>>? ptrShellItem,
    _i2.IShellItemArray? iShellItemArray,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getItemAt,
          [
            index,
            ptrShellItem,
            iShellItemArray,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  void release(_i2.IShellItemArray? iShellItemArray) => super.noSuchMethod(
        Invocation.method(
          #release,
          [iShellItemArray],
        ),
        returnValueForMissingStub: null,
      );
}
