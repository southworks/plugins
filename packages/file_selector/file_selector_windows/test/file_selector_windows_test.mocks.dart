// Mocks generated by Mockito 5.3.0 from annotations
// in file_selector_windows/example/windows/flutter/ephemeral/.plugin_symlinks/file_selector_windows/test/file_selector_windows_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ffi' as _i5;

import 'package:file_selector_windows/src/dart_file_selector_api.dart' as _i4;
import 'package:file_selector_windows/src/messages.g.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:win32/win32.dart' as _i6;

import 'test_api.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TestFileSelectorApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestFileSelectorApi extends _i1.Mock
    implements _i2.TestFileSelectorApi {
  MockTestFileSelectorApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String?> showOpenDialog(_i3.SelectionOptions? options,
          String? initialDirectory, String? confirmButtonText) =>
      (super.noSuchMethod(
          Invocation.method(
              #showOpenDialog, [options, initialDirectory, confirmButtonText]),
          returnValue: <String?>[]) as List<String?>);
  @override
  List<String?> showSaveDialog(
          _i3.SelectionOptions? options,
          String? initialDirectory,
          String? suggestedName,
          String? confirmButtonText) =>
      (super.noSuchMethod(
          Invocation.method(#showSaveDialog,
              [options, initialDirectory, suggestedName, confirmButtonText]),
          returnValue: <String?>[]) as List<String?>);
}

/// A class which mocks [DartFileSelectorAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockDartFileSelectorAPI extends _i1.Mock
    implements _i4.DartFileSelectorAPI {
  MockDartFileSelectorAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get filterSpecification =>
      (super.noSuchMethod(Invocation.getter(#filterSpecification),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  set filterSpecification(Map<String, String>? _filterSpecification) =>
      super.noSuchMethod(
          Invocation.setter(#filterSpecification, _filterSpecification),
          returnValueForMissingStub: null);
  @override
  int get hWndOwner =>
      (super.noSuchMethod(Invocation.getter(#hWndOwner), returnValue: 0)
          as int);
  @override
  set hWndOwner(int? _hWndOwner) =>
      super.noSuchMethod(Invocation.setter(#hWndOwner, _hWndOwner),
          returnValueForMissingStub: null);
  @override
  bool get fileMustExist =>
      (super.noSuchMethod(Invocation.getter(#fileMustExist), returnValue: false)
          as bool);
  @override
  set fileMustExist(bool? _fileMustExist) =>
      super.noSuchMethod(Invocation.setter(#fileMustExist, _fileMustExist),
          returnValueForMissingStub: null);
  @override
  List<String> getFiles(
          {String? initialDirectory,
          String? confirmButtonText,
          _i3.SelectionOptions? selectionOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#getFiles, [], {
            #initialDirectory: initialDirectory,
            #confirmButtonText: confirmButtonText,
            #selectionOptions: selectionOptions
          }),
          returnValue: <String>[]) as List<String>);
  @override
  int getOptions(
          _i5.Pointer<_i5.Uint32>? ptrOptions, _i6.IFileOpenDialog? dialog) =>
      (super.noSuchMethod(Invocation.method(#getOptions, [ptrOptions, dialog]),
          returnValue: 0) as int);
  @override
  int getDialogOptions(int? options, _i3.SelectionOptions? selectionOptions) =>
      (super.noSuchMethod(
          Invocation.method(#getDialogOptions, [options, selectionOptions]),
          returnValue: 0) as int);
  @override
  int setDialogOptions(
          _i5.Pointer<_i5.Uint32>? ptrOptions,
          _i3.SelectionOptions? selectionOptions,
          _i6.IFileOpenDialog? dialog) =>
      (super.noSuchMethod(
          Invocation.method(
              #setDialogOptions, [ptrOptions, selectionOptions, dialog]),
          returnValue: 0) as int);
  @override
  int setInitialDirectory(
          String? initialDirectory, _i6.IFileOpenDialog? dialog) =>
      (super.noSuchMethod(
          Invocation.method(#setInitialDirectory, [initialDirectory, dialog]),
          returnValue: 0) as int);
  @override
  int initializeComLibrary() =>
      (super.noSuchMethod(Invocation.method(#initializeComLibrary, []),
          returnValue: 0) as int);
  @override
  List<String> returnSelectedElements(
          int? hResult,
          _i3.SelectionOptions? selectionOptions,
          _i6.IFileOpenDialog? dialog) =>
      (super.noSuchMethod(
          Invocation.method(
              #returnSelectedElements, [hResult, selectionOptions, dialog]),
          returnValue: <String>[]) as List<String>);
  @override
  int addConfirmButtonLabel(
          String? confirmButtonText, _i6.IFileOpenDialog? dialog) =>
      (super.noSuchMethod(
          Invocation.method(
              #addConfirmButtonLabel, [confirmButtonText, dialog]),
          returnValue: 0) as int);
  @override
  int addFileFilters(_i3.SelectionOptions? selectionOptions,
          _i6.IFileOpenDialog? fileDialog) =>
      (super.noSuchMethod(
          Invocation.method(#addFileFilters, [selectionOptions, fileDialog]),
          returnValue: 0) as int);
  @override
  int setSuggestedFileName(
          String? suggestedFileName, _i6.IFileOpenDialog? fileDialog) =>
      (super.noSuchMethod(
          Invocation.method(
              #setSuggestedFileName, [suggestedFileName, fileDialog]),
          returnValue: 0) as int);
  @override
  void clearFilterSpecification() =>
      super.noSuchMethod(Invocation.method(#clearFilterSpecification, []),
          returnValueForMissingStub: null);
}
