// Mocks generated by Mockito 5.3.2 from annotations
// in file_selector_windows/test/file_selector_dart/dialog_wrapper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ffi' as _i3;

import 'package:file_selector_windows/src/file_selector_dart/file_dialog_controller.dart'
    as _i2;
import 'package:file_selector_windows/src/file_selector_dart/shell_win32_api.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:win32/win32.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FileDialogController].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileDialogController extends _i1.Mock
    implements _i2.FileDialogController {
  MockFileDialogController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int setFolder(_i3.Pointer<_i4.COMObject>? path) => (super.noSuchMethod(
        Invocation.method(
          #setFolder,
          [path],
        ),
        returnValue: 0,
      ) as int);
  @override
  int setFileName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #setFileName,
          [name],
        ),
        returnValue: 0,
      ) as int);
  @override
  int setFileTypes(
    int? count,
    _i3.Pointer<_i4.COMDLG_FILTERSPEC>? filters,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFileTypes,
          [
            count,
            filters,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int setOkButtonLabel(String? text) => (super.noSuchMethod(
        Invocation.method(
          #setOkButtonLabel,
          [text],
        ),
        returnValue: 0,
      ) as int);
  @override
  int getOptions(_i3.Pointer<_i3.Uint32>? outOptions) => (super.noSuchMethod(
        Invocation.method(
          #getOptions,
          [outOptions],
        ),
        returnValue: 0,
      ) as int);
  @override
  int setOptions(int? options) => (super.noSuchMethod(
        Invocation.method(
          #setOptions,
          [options],
        ),
        returnValue: 0,
      ) as int);
  @override
  int show(int? parent) => (super.noSuchMethod(
        Invocation.method(
          #show,
          [parent],
        ),
        returnValue: 0,
      ) as int);
  @override
  int getResult(_i3.Pointer<_i3.Pointer<_i4.COMObject>>? outItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #getResult,
          [outItem],
        ),
        returnValue: 0,
      ) as int);
  @override
  int getResults(_i3.Pointer<_i3.Pointer<_i4.COMObject>>? outItems) =>
      (super.noSuchMethod(
        Invocation.method(
          #getResults,
          [outItems],
        ),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [ShellWin32Api].
///
/// See the documentation for Mockito's code generation for more information.
class MockShellWin32Api extends _i1.Mock implements _i5.ShellWin32Api {
  MockShellWin32Api() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int createItemFromParsingName(
    String? initialDirectory,
    _i3.Pointer<_i4.GUID>? ptrGuid,
    _i3.Pointer<_i3.Pointer<_i3.NativeType>>? ptrPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createItemFromParsingName,
          [
            initialDirectory,
            ptrGuid,
            ptrPath,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  String getPathForShellItem(_i4.IShellItem? shellItem) => (super.noSuchMethod(
        Invocation.method(
          #getPathForShellItem,
          [shellItem],
        ),
        returnValue: '',
      ) as String);
}
